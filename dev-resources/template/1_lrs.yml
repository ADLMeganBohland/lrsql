AWSTemplateFormatVersion: '2010-09-09'
Description: 'SQL LRS basic instance, LB, and db deployment'
Parameters:
  # Networking
  VPCId:
    Description: 'VPC on which to run SQL LRS'
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Description: Subnet 1 on which to run services
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: Subnet 2 on which to run services
    Type: AWS::EC2::Subnet::Id

  # Postgres
  # PostgreSQL Storage
  DBSnapshotIdentifier:
    Description: Snapshot identifier to restore DB from. Note that some other params will be ignored if you set this
    Type: String

  DBEngineMode:
    Description: PostgreSQL Engine mode on RDS
    Type: String
    Default: 'provisioned'
    AllowedValues:
      - 'provisioned'
      - 'serverless'
  DBEngineVersion:
    Description: PostgreSQL engine version on RDS
    Type: String
    Default: '10.12'
    AllowedValues:
      - '10.12'
  DBInstanceClass:
    Description: For provisioned aurora, the instance class to use
    Type: String
    Default: 'db.r4.large'
  DBName:
    Description: PG Database name. Ignored if DBSnapshotIdentifier is provided
    Type: String
    Default: 'lrsql_demo'
  DBMasterUserName:
    Description: Name of admin user
    Type: String
    Default: yetadmin
  DBAppUserName:
    Description: Name of app db user
    Type: String
    Default: admin
  DBMasterUserPasswordPath:
    Description: SSM Path to the secret password
    Type: String
    Default: '/tc/staging/DB_MASTER_USER_PASSWORD'
  DBMasterUserPasswordVersion:
    Description: SSM version
    Type: Number
    Default: 1
  DBAppUserPasswordPath:
    Description: SSM Path to the secret password
    Type: String
    Default: '/tc/staging/DB_APP_USER_PASSWORD'
  DBAppUserPasswordVersion:
    Description: SSM version
    Type: Number
    Default: 1
  DBBackupRetentionPeriod:
    Description: Retention period for PG backups
    Type: Number
    Default: 1
  DBDeletionProtection:
    Description: Enable/disable deletion protection on the DB
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  # LRS Instance
  LrsInstanceType:
    Type: String
    Description: EC2 Instance Type to launch as LRS App Server
    Default: t2.micro
  LrsInstanceAmiId:
    Description: AMI (image) to use on EC2 instances.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  LrsSubnetId:
    Description: Subnet on which to run the LRS instance
    Type: AWS::EC2::Subnet::Id
  LrsInstanceKeyName:
    Description: Name of an EC2 key pair that can be used to connect to the instance
    Type: String
    Default: ps-neptune-dev
  LrsAllowedCidr:
    Description: The initial CIDR block to whitelist for ssh (22) access
    Type: String
    Default: '0.0.0.0/0'

Resources:

  #Bastion
  BastionInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_installNginx
            - 01_configProxy
        00_installNginx:
          commands:
            01install_nginx:
              cwd: "~"
              command: "sudo amazon-linux-extras install -y nginx1"
            02remove_default_conf:
              cwd: "~"
              command: "mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf_distro"
        01_configProxy:
          files:
            '/etc/nginx/nginx.conf':
              content: !Sub |
                worker_processes  1;
                error_log  /var/log/nginx/error.log;
                events {
                  worker_connections  1024;
                }
                http {
                  include            mime.types;
                  default_type       application/octet-stream;
                  sendfile           on;
                  keepalive_timeout  65;
                  server {
                    listen       80;
                    server_name  _;

                    location / {
                      proxy_set_header Host https://${NeptuneDBCluster.Endpoint}:${DBClusterPort};
                      proxy_set_header Accept */*;
                      proxy_set_header X-Forwarded-For "";
                      proxy_http_version 1.1;
                      proxy_set_header Connection "";
                      proxy_pass https://${NeptuneDBCluster.Endpoint}:${DBClusterPort};
                    }
                  }
                  log_format  main '$remote_addr - $remote_user [$time_local] - to: $upstream_addr: "$request" '
                                   '$status $body_bytes_sent "$http_referer" '
                                   '"$http_user_agent" "$http_x_forwarded_for"';
                  access_log  /var/log/nginx/access.log  main;
                }
              mode: '000400'
              owner: root
              group: root
          commands:
            01start_proxy:
              command: !Sub |
                sudo systemctl start nginx
    Properties:
      InstanceType: !Ref BastionInstanceType
      SecurityGroupIds:
        - !Ref BastionInstanceSecurityGroup
      KeyName: !Ref BastionKeyName
      ImageId: !Ref BastionInstanceAmiId
      SubnetId: !Ref BastionSubnetId
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              # Run init
            - 'sudo /opt/aws/bin/cfn-init -v --stack '
            - !Ref AWS::StackName
            - ' --resource BastionInstance --configsets default --region '
            - !Ref AWS::Region
            - |+
    DependsOn:
      - NeptuneDBCluster

  BastionInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and 8080 via port 22
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BastionAllowedCidr
        Description: 'ssh from allowed IP'
      - FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
        CidrIp: !Ref BastionAllowedCidr
        Description: 'LRS access from allowed IP'

Outputs:
  DBClusterId:
    Description: 'Neptune Cluster Identifier'
    Value: !Ref NeptuneDBCluster
  DBSubnetGroupId:
    Description: 'Neptune DBSubnetGroup Identifier'
    Value: !Ref NeptuneDBSubnetGroup
  DBClusterResourceId:
    Description: 'Neptune Cluster Resource Identifier'
    Value: !GetAtt NeptuneDBCluster.ClusterResourceId
  DBClusterEndpoint:
    Description: 'Master Endpoint for Neptune Cluster'
    Value: !GetAtt NeptuneDBCluster.Endpoint
  DBInstanceEndpoint:
    Description: 'Master Instance Endpoint'
    Value: !GetAtt NeptuneDBInstance.Endpoint
  InternalSparqlEndpoint:
    Description: 'Sparql Endpoint for Neptune'
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt NeptuneDBCluster.Endpoint
        - ':'
        - !GetAtt NeptuneDBCluster.Port
        - '/sparql'
  DBClusterReadEndpoint:
    Description: 'DB cluster Read Endpoint'
    Value: !GetAtt NeptuneDBCluster.ReadEndpoint
  DBClusterPort:
    Description: 'Port for the Neptune Cluster'
    Value: !GetAtt NeptuneDBCluster.Port
  NeptuneSG:
    Description: 'Neptune Security Group'
    Value: !Ref NeptuneSG
  #Bastion
  BastionInstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref BastionInstance
  BastionPublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt BastionInstance.PublicDnsName
  BastionPublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt BastionInstance.PublicIp
  PublicSparqlEndpoint:
    Description: 'Exposed Sparql Endpoint for Neptune via Bastion'
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt BastionInstance.PublicDnsName
        - '/sparql'
