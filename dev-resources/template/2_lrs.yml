AWSTemplateFormatVersion: '2010-09-09'
Description: 'SQL LRS and DB Init Script'
Parameters:
  # Networking
  VPCId:
    Description: 'VPC on which to run SQL LRS'
    Type: AWS::EC2::VPC::Id
  DBSubnets:
    Description: Subnets on which to run services
    Type: List<AWS::EC2::Subnet::Id>
  # DB Details
  DBName:
    Description: PG Database name. Ignored if DBSnapshotIdentifier is provided
    Type: String
    Default: 'lrsql_demo'
  DBHost:
    Description: Write hostname of PG db
    Type: String
  DBPort:
    Description: Write hostname of PG db
    Type: String
    Default: 3306
  DBInstanceSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: DB instance security group
  DBMasterUserName:
    Description: Name of admin user
    Type: String
    Default: yetadmin
  DBAppUserName:
    Description: Name of app db user
    Type: String
    Default: lrsqldbuser
  DBMasterUserPasswordPath:
    Description: SSM Path to the secret password
    Type: String
    Default: '/lrsql/demo/DB_MASTER_USER_PASSWORD'
  DBMasterUserPasswordVersion:
    Description: SSM version
    Type: Number
    Default: 1
  DBAppUserPasswordPath:
    Description: SSM Path to the secret password
    Type: String
    Default: '/lrsql/demo/DB_APP_USER_PASSWORD'
  DBAppUserPasswordVersion:
    Description: SSM version
    Type: Number
    Default: 1
  # Lambda Script
  S3Bucket:
    Type: String
    Default: lrsql-demo
  S3Key:
    Type: String
    Default: db-init.zip

  # Server(s)
  InstanceType:
    Type: String
    Description: EC2 Instance Type to launch.
    Default: c5.large
    AllowedValues:
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
  InstanceAmiId:
    Description: AMI (image) to use on EC2 instances.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceKeyName:
    Description: Name of an EC2 key pair that can be used to connect to the server
    Type: String
    Default: ps-neptune-dev
  InstanceSubnet:
    Description: Subnet on which to run the lrsql server
    Type: AWS::EC2::Subnet::Id
  DefaultAdminUser:
    Description: Username of seed lrs admin
    Type: String
    Default: lrsqladmin
  DefaultAdminPass:
    Description: Initial seed password for lrs admin
    Type: String
  LrsVersion:
    Description: Version of SQL LRS to download and install (public release versions on GitHub)
    Type: String
    Default: v0.1.3

Resources:

  # DB Initialization Function and custom resource to run it

  DBInitFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 15
      Role: !GetAtt DBInitFnExecRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBInitFnSG
        SubnetIds: !Ref DBSubnets

  DBInitFnSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG For Lambda Init Fn
      VpcId: !Ref VPCId

  DBInstanceInitIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the init fn to RDS instance
      GroupId: !Ref DBInstanceSG
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !Ref DBInitFnSG

  DBInitPolicy:
    Type: AWS::IAM::ManagedPolicy
    Description: IAM Policy for db init lambda access.
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-${AWS::Region}-lambda-dbinit-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow access to SSM and VPC related networking
          - Effect: Allow
            Action:
              - "ssm:GetParameter"
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBAppUserPasswordPath}'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBMasterUserPasswordPath}'
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeInstances
              - ec2:AttachNetworkInterface
            Resource: '*'

  DBInitFnExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - !Ref DBInitPolicy

  InitDBCustomResource:
    # Run the lambda init fn as a custom resource
    Type: Custom::initDBCustomResource
    DependsOn: DBInitFn
    Properties:
      ServiceToken: !GetAtt DBInitFn.Arn
      DBMasterUsername: !Ref DBMasterUserName
      DBMasterPasswordPath: !Join
            - ':'
            - - !Ref DBMasterUserPasswordPath
              - !Ref DBMasterUserPasswordVersion
      DBUsername: !Ref DBAppUserName
      DBPasswordPath: !Join
            - ':'
            - - !Ref DBAppUserPasswordPath
              - !Ref DBAppUserPasswordVersion
      DBHost: !Ref DBHost
      DBPort: !Ref DBPort
      DBName: !Ref DBName

  # Servers

  InstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Description: IAM Policy for a SQL LRS Server.
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-${AWS::Region}-lrsql-instance-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow pulling DB password
          - Effect: Allow
            Action:
              - "ssm:GetParameter"
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBAppUserPasswordPath}'
          # Allegedly needed for securestring...
          - Effect: Allow
            Action:
              - "kms:Decrypt"
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/secretsmanager'
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Ref InstancePolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]

  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the bastion
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '73.133.206.211/32'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '73.133.206.211/32'


  DBInstanceIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the Bastion instance to RDS instance
      GroupId: !Ref DBInstanceSG
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !Ref InstanceSG

  LrsInstance:
    Type: AWS::EC2::Instance
    DependsOn: InitDBCustomResource
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_installLrs
            - 01_setupCfnHup
            - 02_configureLrs
            - 03_enableLrs
            - 04_startLrs
          UpdateEnvironment:
            - 00_installLrs
            - 02_configureLrs
            - 05_restartLrs
        00_installLrs:
          files:
            "/tmp/lrsql.zip":
              source: !Join
                - '/'
                - - "https://github.com/yetanalytics/lrsql/releases/download"
                  - !Ref LrsVersion
                  - "lrsql.zip"
              mode: "000755"
              owner: "root"
              group: "root"
          commands:
            00make_dir:
              cwd: "~"
              command: "sudo mkdir /opt/lrsql"
            01unzip_lrs:
              cwd: "~"
              command: "sudo unzip /tmp/lrsql.zip -d /opt/lrsql/"
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
            '/etc/cfn/hooks.d/tc-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionInstance.Metadata.AWS::CloudFormation::Init.02_configureLrs
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LrsInstance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
        02_configureLrs:
          files:
            '/opt/lrsql/config/lrsql.json':
              content: !Sub |
                {
                  "database": {
                    "dbHost": "${DBHost}",
                    "dbPort": ${DBPort},
                    "dbName": "${DBName}",
                    "dbUser": "${DBAppUserName}",
                    "dbPassword": "${InitDBCustomResource.dbAppPass}"
                  },
                  "lrs" : {
                    "adminUserDefault": "${DefaultAdminUser}",
                    "adminPassDefault": "${DefaultAdminPass}",
                    "authorityUrl": "http://mydomain.com"
                  },
                  "webserver": {
                    "httpHost": "0.0.0.0",
                    "httpPort": 8080,
                    "sslPort": 8443
                  }
                }
              mode: '000755'
              owner: root
              group: root
            '/lib/systemd/system/lrsql.service':
              content: !Sub |
                [Unit]
                Description=SQL LRS Service
                [Service]
                User=root
                # The configuration file application.properties should be here:
                WorkingDirectory=/opt/lrsql
                ExecStart=/opt/lrsql/bin/run_postgres.sh
                SuccessExitStatus=143
                TimeoutStopSec=10
                Restart=on-failure
                RestartSec=5
                [Install]
                WantedBy=multi-user.target
              mode: '000755'
              owner: root
              group: root
        03_enableLrs:
          commands:
            01enable_tc:
              command: !Sub |
                systemctl enable lrsql.service
        04_startLrs:
          commands:
            01start_tc:
              command: !Sub |
                systemctl start lrsql.service
        05_restartLrs:
          commands:
            01daemon_reload:
              command: |
                systemctl daemon-reload
            02start_tc:
              command: !Sub |
                systemctl restart lrsql.service
    Properties:
      ImageId: !Ref InstanceAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref InstanceKeyName
      SecurityGroupIds:
        - !Ref InstanceSG
      SubnetId: !Ref InstanceSubnet
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'Yet SQL LRS ${LrsVersion}'
          # run configsets
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LrsInstance --region ${AWS::Region} --configsets default
          # signal CF
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource LrsInstance --region ${AWS::Region}
